locals {
 {baseName}-file-hash = fileexists("{baseName}.java") ? filebase64sha256("{baseName}.java") : base64sha256("0")
 build-jar-{baseName} = "bash build-application jar {baseName}"
 build-native-{baseName} = "bash build-application native {baseName}"
}

{#if tf-providers}
terraform {
  required_version = ">= 0.14.0"
  required_providers {
    aws        = {
      source  = "hashicorp/aws"
      version = "{tf-provider-aws-version}"
    }
    archive    = {
      source  = "hashicorp/archive"
      version = "{tf-provider-archive-version}"
    }
    null = {
      source = "hashicorp/null"
      version = "{tf-provider-null-version}"
    }
  }
}
provider "aws" {
  region  = "{tf-provider-aws-region ?: 'eu-central-1'}"
}
{/if}

data "aws_iam_policy_document" "iam_for_lambda_{baseName}" {
  version = "2012-10-17"
  statement {
    actions = ["sts:AssumeRole"]
    principals {
      identifiers = ["lambda.amazonaws.com"]
      type        = "Service"
    }
    effect = "Allow"
  }
}

resource "aws_iam_role" "iam_for_lambda_{baseName}" {
  name = "iam_for_lambda_{baseName}"
  assume_role_policy = data.aws_iam_policy_document.iam_for_lambda_{baseName}.json
}
{#if aws-vpc-integration is 'true'}
{#include aws/lambda-vpc.tf.qute /}
{/if}

{#if aws-lambda-logging is 'true'}
{#include aws/lambda-logging.tf.qute /}
{/if}

{#if aws-sqs-enabled is 'true'}
{#include aws/lambda-sqs.tf.qute /}
{/if}

{#if aws-ecs-event-change-capture is 'true'}
{#include aws/lambda-ecs-event.tf.qute /}
{/if}

{#if native-function is 'true'}
resource "null_resource" "native_image_{baseName}" {
  triggers = {
    file-hash = local.{baseName}-file-hash
  }
  provisioner "local-exec" {
    command = local.build-native-{baseName}
  }
}

data "archive_file" "native_function_{baseName}" {
  output_path = "{baseName}-function.zip"
  type        = "zip"
  source_file = "bootstrap"
  depends_on = [null_resource.native_image_{baseName}]
}

resource "aws_lambda_function" "function_{baseName}" {
  filename         = "{baseName}-function.zip"
  source_code_hash = fileexists("{baseName}-function.zip") ? filebase64sha256("{baseName}-function.zip") : base64sha256("0")
  function_name    = "{baseName}"
  role             = aws_iam_role.iam_for_lambda_{baseName}.arn
  handler          = "not-needed"

  depends_on = [
    null_resource.native_image_{baseName}
  ]

  runtime     = "provided"
  memory_size = 128

}
{#else}
resource "null_resource" "jar_file_{baseName}" {
  triggers = {
    file-hash = local.{baseName}-file-hash
  }
  provisioner "local-exec" {
    command = local.build-jar-{baseName}
  }
}

resource "aws_lambda_function" "function_{baseName}" {
  filename         = "{baseName}.jar"
  source_code_hash = local.{baseName}-file-hash
  function_name    = "{baseName}"
  role             = aws_iam_role.iam_for_lambda_{baseName}.arn
  {#if lambda-handler}
  handler          = "{lambda-handler}"
  {#else if mode == 'simple' }
  handler          = "io.quarkus.amazon.lambda.runtime.QuarkusStreamHandler::handleRequest"
  {#else if mode == 'funq' }
  handler          = "io.quarkus.funqy.lambda.FunqyStreamHandler::handleRequest"
  {/if}

  depends_on = [null_resource.jar_file_{baseName}]

  runtime = "java11"
  memory_size = 256

}
{/if}